<%= live_render(@conn, Grav1Web.ProjectsLive) %>

<% encoder_params = Grav1.Encoder.params() %>
<% encoders = encoder_params |> Map.keys() %>

<div id="encoders" style="display: none"><%= encoders_json() %></div>

<div>
  <%= form_for(:project, Routes.project_path(@conn, :add_project), id: "form_add_project", style: "display: none") %></form>

  <label for="select_encoder">encoder</label>
  <select id="select_encoder">
    <%= for encoder <- encoders do %>
    <option><%= encoder %></option>
    <% end %>
  </select>

  <div id="encoder_params">
    <%= for encoder <- encoders do %>
      <div id="params_<%= encoder %>" class="hidden">
        <h1><%= encoder %> params</h1>

        <% {simple, advanced} = encoder_params[encoder] %>

        <div id="<%= encoder %>_params_simple">
          <div>
            <%= for {param_name, param} <- simple do %>
              <div>
                <label for="opt_<%= encoder %>_<%= param_name %>"><%= param_name %></label>
                <%= render_encoder_param(encoder, param_name, param) %>
              </div>
            <% end %>
          </div>
        </div>

        <div id="<%= encoder %>_params_advanced">
          <div>advanced</div>
          <div>
            <%= for {param_name, param} <- advanced do %>
              <div>
                <label for="opt_<%= encoder %>_<%= param_name %>"><%= param_name %></label>
                <%= render_encoder_param(encoder, param_name, param) %>
              </div>
            <% end %>
          </div>
        </div>
      </div>
    <% end %>
  </div>

  <%= submit("add", id: "btn_add_project") %>

</div>

<style>
  .hidden {
    display: none;
  }
</style>

<script>
  const encoders = JSON.parse(document.getElementById("encoders").textContent)
  console.log("encoders", encoders)

  for (const encoder_name of Object.keys(encoders)) {
    for (const param_name of Object.keys(encoders[encoder_name])) {
      const param = encoders[encoder_name][param_name]
      const e = document.getElementById(`opt_${encoder_name}_${param_name}`)
      if (param.requires) {
        const req_e = document.getElementById(`opt_${encoder_name}_${param.requires}`)
        const onchange = () => e.parentElement.classList.toggle("hidden", !param.requires_values.includes(req_e.value))
        req_e.addEventListener("change", onchange)
        onchange()
      }
    }
  }

  btn_add_project.addEventListener("click", () => {
    const selected_encoder = select_encoder.value

    const options = {}
    for (const param_name of Object.keys(encoders[selected_encoder])) {
      const param = encoders[selected_encoder][param_name]
      const e = document.getElementById(`opt_${selected_encoder}_${param_name}`)
      if (param.requires) {
        const req_e = document.getElementById(`opt_${selected_encoder}_${param.requires}`)
        if (param.requires_values.includes(req_e)) continue
      }
      if (param_name == "resolution") {
        const res_dims = e.value.split("x")
        options["--width"] = res_dims[0]
        options["--height"] = res_dims[1]
      } else {
        options[param_name] = e.value
      }
    }
    
    const params = []
    for (const param_name of Object.keys(options)) {
      if (options[param_name].length > 0) {
        if (param_name.startsWith("--")) {
          params.push(`${param_name}=${options[param_name]}`)
        } else if (param_name.startsWith("-")) {
          params.push(param_name)
          params.push(options[param_name])
        }
      } else {
        params.push(param_name)
      }
    }
    console.log(params)
  })

  function show_params() {
    for (const encoder_param of encoder_params.children) {
      encoder_param.classList.toggle("hidden", encoder_param.id != `params_${select_encoder.value}`) 
    }
    selected_encoder = select_encoder.value
  }

  select_encoder.addEventListener("change", () => {
    show_params()
  })

  show_params()
</script>
